// test-connection-advanced.js
const { PrismaClient } = require('@prisma/client');

async function testConnectionAdvanced() {
    const prisma = new PrismaClient({
        log: ['query', 'info', 'warn', 'error'],
    });
    
    try {
        console.log('üîó Iniciando prueba avanzada de conexi√≥n...\n');
        
        // 1. Probar conexi√≥n b√°sica
        console.log('1Ô∏è‚É£ Probando conexi√≥n b√°sica...');
        await prisma.$connect();
        console.log('‚úÖ Conexi√≥n exitosa\n');
        
        // 2. Informaci√≥n del servidor
        console.log('2Ô∏è‚É£ Obteniendo informaci√≥n del servidor...');
        const serverInfo = await prisma.$queryRaw`
            SELECT 
                @@VERSION as version,
                @@SERVERNAME as server_name,
                DB_NAME() as database_name,
                USER_NAME() as user_name,
                SYSTEM_USER as system_user,
                @@LANGUAGE as language,
                GETDATE() as current_time
        `;
        console.log('üìä Informaci√≥n del servidor:');
        console.table(serverInfo);
        
        // 3. Verificar configuraci√≥n de autenticaci√≥n
        console.log('3Ô∏è‚É£ Verificando configuraci√≥n de autenticaci√≥n...');
        const authInfo = await prisma.$queryRaw`
            SELECT 
                SERVERPROPERTY('IsIntegratedSecurityOnly') as IntegratedSecurityOnly,
                SERVERPROPERTY('IsClustered') as IsClustered,
                SERVERPROPERTY('Edition') as Edition,
                SERVERPROPERTY('ProductVersion') as ProductVersion
        `;
        console.log('üîê Configuraci√≥n de autenticaci√≥n:');
        console.table(authInfo);
        
        // 4. Listar todas las bases de datos
        console.log('4Ô∏è‚É£ Listando bases de datos disponibles...');
        const databases = await prisma.$queryRaw`
            SELECT name as database_name, database_id, create_date 
            FROM sys.databases 
            WHERE database_id > 4  -- Excluir bases de datos del sistema
            ORDER BY name
        `;
        console.log('üóÑÔ∏è Bases de datos disponibles:');
        console.table(databases);
        
        // 5. Listar tablas en la base de datos actual
        console.log('5Ô∏è‚É£ Listando tablas en la base de datos actual...');
        const tables = await prisma.$queryRaw`
            SELECT 
                TABLE_NAME,
                TABLE_TYPE,
                TABLE_SCHEMA
            FROM INFORMATION_SCHEMA.TABLES 
            WHERE TABLE_TYPE = 'BASE TABLE'
            ORDER BY TABLE_NAME
        `;
        console.log('üìã Tablas disponibles:');
        if (tables.length > 0) {
            console.table(tables);
        } else {
            console.log('   ‚ö†Ô∏è  No hay tablas creadas a√∫n');
        }
        
        // 6. Verificar esquema de Prisma vs Base de datos
        console.log('6Ô∏è‚É£ Verificando modelos de Prisma...');
        try {
            // Intentar contar registros en cada modelo
            const modelCounts = {};
            
            try {
                modelCounts.users = await prisma.user.count();
                console.log(`üë• Usuarios: ${modelCounts.users}`);
            } catch (e) {
                console.log('‚ö†Ô∏è  Modelo User: Tabla no existe o no migrada');
            }
            
            try {
                modelCounts.objetivos = await prisma.objetivo.count();
                console.log(`üéØ Objetivos: ${modelCounts.objetivos}`);
            } catch (e) {
                console.log('‚ö†Ô∏è  Modelo Objetivo: Tabla no existe o no migrada');
            }
            
            try {
                modelCounts.indicadores = await prisma.indicador.count();
                console.log(`üìà Indicadores: ${modelCounts.indicadores}`);
            } catch (e) {
                console.log('‚ö†Ô∏è  Modelo Indicador: Tabla no existe o no migrada');
            }
            
        } catch (error) {
            console.log('‚ö†Ô∏è  Error verificando modelos:', error.message);
        }
        
        // 7. Prueba de rendimiento
        console.log('\n7Ô∏è‚É£ Probando rendimiento de la conexi√≥n...');
        const start = Date.now();
        for (let i = 0; i < 5; i++) {
            await prisma.$queryRaw`SELECT 1`;
        }
        const end = Date.now();
        console.log(`‚ö° 5 consultas ejecutadas en ${end - start}ms`);
        
        // 8. Verificar espacio en disco de la base de datos
        console.log('\n8Ô∏è‚É£ Verificando espacio de la base de datos...');
        try {
            const diskSpace = await prisma.$queryRaw`
                SELECT 
                    DB_NAME() as database_name,
                    SUM(size * 8.0 / 1024) as size_mb,
                    SUM(CASE WHEN type = 0 THEN size * 8.0 / 1024 END) as data_size_mb,
                    SUM(CASE WHEN type = 1 THEN size * 8.0 / 1024 END) as log_size_mb
                FROM sys.master_files
                WHERE database_id = DB_ID()
                GROUP BY database_id
            `;
            console.log('üíæ Informaci√≥n de espacio:');
            console.table(diskSpace);
        } catch (error) {
            console.log('‚ö†Ô∏è  No se pudo obtener informaci√≥n de espacio:', error.message);
        }
        
        console.log('\nüéâ ¬°Todas las pruebas completadas exitosamente!');
        
    } catch (error) {
        console.error('\n‚ùå Error durante las pruebas:');
        console.error('üìã Mensaje:', error.message);
        console.error('üîç C√≥digo:', error.code);
        console.error('üìç Stack:', error.stack);
        
        // Diagn√≥stico autom√°tico
        console.log('\nüîß DIAGN√ìSTICO AUTOM√ÅTICO:');
        
        if (error.message.includes('ECONNREFUSED')) {
            console.log('üî∏ SQL Server probablemente no est√° corriendo');
            console.log('   ‚Ä¢ Verificar servicios: services.msc');
            console.log('   ‚Ä¢ Iniciar SQL Server: net start MSSQLSERVER');
            console.log('   ‚Ä¢ Verificar puerto en SQL Server Configuration Manager');
        }
        
        if (error.message.includes('Login failed')) {
            console.log('üî∏ Problema de autenticaci√≥n');
            console.log('   ‚Ä¢ Verificar credenciales en .env');
            console.log('   ‚Ä¢ Probar con: sqlcmd -S localhost -E');
            console.log('   ‚Ä¢ Verificar modo de autenticaci√≥n SQL Server');
        }
        
        if (error.message.includes('Invalid connection string')) {
            console.log('üî∏ Problema en cadena de conexi√≥n');
            console.log('   ‚Ä¢ Verificar formato en .env');
            console.log('   ‚Ä¢ Escapar caracteres especiales');
            console.log('   ‚Ä¢ Verificar nombre de instancia');
        }
        
        if (error.message.includes('network')) {
            console.log('üî∏ Problema de red');
            console.log('   ‚Ä¢ Verificar firewall de Windows');
            console.log('   ‚Ä¢ Habilitar TCP/IP en SQL Server');
            console.log('   ‚Ä¢ Verificar Named Pipes');
        }
        
    } finally {
        await prisma.$disconnect();
        console.log('\nüîå Conexi√≥n cerrada');
    }
}

// Ejecutar pruebas
console.log('üöÄ Iniciando pruebas avanzadas de conexi√≥n a SQL Server...\n');
testConnectionAdvanced();
